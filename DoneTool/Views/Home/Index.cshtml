@model DoneTool.Models.ViewModels.PageModel

<link rel="stylesheet" href="~/css/taskLayout.css">

<div class="header-section">
    <div class="header-content">
        <h1 class="task-title">@Model.TaskTitle</h1>
        <p class="developer-name">@Model.DeveloperName</p>
    </div>
</div>

<div class="task-checklist">
    <table class="table">
        <thead>
            <tr class="header-row">
                <th>Steps</th>
                <th>Status</th>
                <th>Guard</th>
                <th>Comment</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var task in Model.Checks)
            {
                <tr data-taskchecklist-id="@task.ID" data-last-updated="@task.LastUpdated.ToString("o")" data-skip-reasons='@string.Join(",", task.SkipReasons)'>
                    <td class="clickable-cell">
                        <div class="step-container">
                            <a href="@task.Link" target="_blank" class="full-cell-link">
                                <span class="step-title">@task.Step</span>
                                <img src="~/img/icon.webp" alt="Clickable Icon" class="clickable-icon" />
                            </a>
                            <div id="duplicateBtn">
                                @if (!task.IsDuplicate)
                                {
                                    <button onclick="duplicateTask('@task.ID')" class="btn btn-primary btn-right">+</button>
                                }
                                else
                                {
                                    <button onclick="deleteTask('@task.ID')" class="btn btn-danger btn-right">-</button>
                                }
                            </div>
                        </div>
                    <td>

                        <div class="custom-dropdown">
                            <div class="status-button-wrapper">
                                <button class="status-button @("status-" + task.SelectedStatus.ToLower())" onclick="toggleStatus(this)">
                                    @task.SelectedStatus
                                </button>
                                <button class="arrow-button status-@task.SelectedStatus.ToLower()" onclick="toggleDropdownMenu(this)">
                                    <span class="dropdown-arrow">▼</span>
                                </button>
                            </div>
                            <ul class="dropdown-menu">
                                <li class="status-todo" data-value="TODO">TODO</li>
                                <li class="status-skipped" data-value="SKIPPED">SKIPPED</li>
                            </ul>
                            <input type="hidden" name="status" class="form-control status-dropdown" value="@task.SelectedStatus">
                        </div>
                    </td>
                    <td>
                        <div class="custom-guard-dropdown">
                            <input type="text" class="form-control guard-search" placeholder="Search Guards" value="@task.Guard" onclick="toggleGuardDropdown(this)" oninput="filterGuardOptions(this)">
                            <ul class="guard-dropdown-menu">
                                <li class="dropdown-section">Suggested</li>
                                    @foreach (var suggestedGuard in Model.SuggestedGuards)
                                    {
                                    <li class="guard-option" data-value="@suggestedGuard">@suggestedGuard</li>
                                    }

                                <li class="dropdown-section">Other</li>
                                    @foreach (var guard in Model.Guards)
                                    {
                                    <li class="guard-option" data-value="@guard">@guard</li>
                                    }
                            </ul>
                        </div>
                    </td>
                    <td>
                        <textarea asp-for="@task.Comment" class="form-control" placeholder="Enter your comment">@task.Comment</textarea>
                    </td>
                    <td>
                        <div class="action-button-wrapper">
                            <button class="action-button"
                                @(task.ActionType == "NoAction" || task.ActionType == null ? "disabled" : "")>
                                    @(task.ActionType == "Kickoff" ? "Open Outlook" :
                                        task.ActionType == "SendToCR" ? "Send to CR" :
                                        task.ActionType == "SendToQA" ? "Send to QA" : "No Action")
                            </button>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>
<div class="send-cr-button-wrapper">
    <button class="send-cr-button">Send to CR</button>
</div>

<div id="commentModal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h3>Provide a reason for skipping</h3>
        <textarea id="skipComment" class="form-control" placeholder="Enter your comment (min 10 characters)"></textarea>
        <h5>Or select a common reason:</h5>
        <select id="commonReasonsDropdown" class="form-control">
            <option value="">Select a reason...</option>
        </select>

        <button id="submitSkip" onclick="submitSkip()">Submit</button>
    </div>
</div>


<div id="customReloadModal" class="custom-reload-modal">
    <div class="custom-reload-modal-content">
        <p>The data has been updated by someone else. Please reload the page and try again.</p>
        <button id="customReloadButton">Reload Page</button>
    </div>
</div>

<script src="~/js/taskManager.js"></script>

<script>
function toggleGuardDropdown(input) {
    const dropdown = input.nextElementSibling;
    dropdown.classList.toggle('show');

    document.addEventListener('click', function(event) {
        if (!input.parentElement.contains(event.target)) {
            dropdown.classList.remove('show');
        }
    });
}

function filterGuardOptions(input) {
    const filter = input.value.normalize("NFD").replace(/[\u0300-\u036f]/g, "").toLowerCase();
    const dropdown = input.nextElementSibling;
    const options = dropdown.querySelectorAll(".guard-option");

    options.forEach(option => {
        const normalizedOptionText = option.textContent.normalize("NFD").replace(/[\u0300-\u036f]/g, "").toLowerCase();
        if (normalizedOptionText.includes(filter)) {
            option.style.display = "";
            const originalText = option.textContent;
            const regex = new RegExp(filter, "gi");
            option.innerHTML = originalText.replace(regex, match => `<span class="highlight">${match}</span>`);
        } else {
            option.style.display = "none";
            option.innerHTML = option.textContent;
        }
    });
}

document.querySelectorAll('.guard-option').forEach(option => {
    option.addEventListener('click', function() {
        const input = this.parentElement.previousElementSibling;
        input.value = this.dataset.value;
        this.parentElement.classList.remove('show'); 
    });
});
</script>
